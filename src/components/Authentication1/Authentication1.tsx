/**********************************************************************
 *
 *   Component generated by Quest
 *
 *   WARNING: By editing this component by hand, you will lose the ability to regenerate the code without conflicts.
 *   To preserve that ability, always export from Quest to regenerate this file.
 *   To setup element attributes and CSS properties, use the Quest web app
 *   Code Logic goes in the hook associated with this component
 *
 *   For help and further details refer to: https://www.quest.ai/docs
 *
 *
 **********************************************************************/

import React from 'react';
import { TextField, Button, Link as MUILink } from '@mui/material';
import LogoImage from 'src/assets/images/Authentication1_Logo.png';
import { styled } from '@mui/material/styles';
import { Authentication1Props } from 'src/types';
import useAuthentication1 from 'src/components/Authentication1/useAuthentication1';

const ScreenDesktop: any = styled('div', {
  shouldForwardProp: (prop: any) => !['data'].includes(prop.toString()),
})(({ theme, data }: any) => ({
  backgroundColor: theme.palette['Background']['Default'],
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `row`,
  width: '100%',
  justifyContent: `center`,
  alignItems: `flex-start`,
  padding: data.currentVariant === 'ScreenMobile' ? `100px 0px` : `195px 0px`,
  boxSizing: `border-box`,
  overflow: `hidden`,
  height: 'auto',
}));

const LogIn: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `center`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `0px`,
  overflow: `hidden`,
});

const Top: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  margin: `0px`,
});

const Logo: any = styled('img')({
  height: `62.23px`,
  width: `48.38px`,
  objectFit: `contain`,
  margin: `0px`,
});

const LogInToYourAccount: any = styled('div', {
  shouldForwardProp: (prop: any) => !['data'].includes(prop.toString()),
})(({ theme, data }: any) => ({
  textAlign: `center`,
  whiteSpace: `pre-wrap`,
  fontSynthesis: `none`,
  color: theme.palette['Text']['Primary'],
  fontStyle:
    data.currentVariant === 'ScreenMobile'
      ? theme.typography['Typography']['H6'].fontStyle
      : theme.typography['Typography']['H4'].fontStyle,
  fontFamily:
    data.currentVariant === 'ScreenMobile'
      ? theme.typography['Typography']['H6'].fontFamily
      : theme.typography['Typography']['H4'].fontFamily,
  fontWeight:
    data.currentVariant === 'ScreenMobile'
      ? theme.typography['Typography']['H6'].fontWeight
      : theme.typography['Typography']['H4'].fontWeight,
  fontSize:
    data.currentVariant === 'ScreenMobile'
      ? theme.typography['Typography']['H6'].fontSize
      : theme.typography['Typography']['H4'].fontSize,
  letterSpacing:
    data.currentVariant === 'ScreenMobile'
      ? theme.typography['Typography']['H6'].letterSpacing
      : theme.typography['Typography']['H4'].letterSpacing,
  lineHeight:
    data.currentVariant === 'ScreenMobile'
      ? theme.typography['Typography']['H6'].lineHeight
      : theme.typography['Typography']['H4'].lineHeight,
  textDecoration:
    data.currentVariant === 'ScreenMobile'
      ? theme.typography['Typography']['H6'].textDecoration
      : theme.typography['Typography']['H4'].textDecoration,
  textTransform:
    data.currentVariant === 'ScreenMobile'
      ? theme.typography['Typography']['H6'].textTransform
      : theme.typography['Typography']['H4'].textTransform,
  margin: `30px 0px 0px 0px`,
}));

const Input1: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `flex-start`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `40px 0px 0px 0px`,
});

const TextFieldStandard: any = styled(TextField, {
  shouldForwardProp: (prop: any) => !['data'].includes(prop.toString()),
})(({ theme, data }: any) => ({
  alignSelf: `stretch`,
  margin: `0px`,
  color: theme.palette['Text']['Secondary'],
  fontStyle: theme.typography['Components']['Input Label'].fontStyle,
  fontFamily: theme.typography['Components']['Input Label'].fontFamily,
  fontWeight: theme.typography['Components']['Input Label'].fontWeight,
  fontSize: theme.typography['Components']['Input Label'].fontSize,
  letterSpacing: theme.typography['Components']['Input Label'].letterSpacing,
  lineHeight: theme.typography['Components']['Input Label'].lineHeight,
  textDecoration: theme.typography['Components']['Input Label'].textDecoration,
  textTransform: theme.typography['Components']['Input Label'].textTransform,
}));

const TextFieldStandard1: any = styled(TextField, {
  shouldForwardProp: (prop: any) => !['data'].includes(prop.toString()),
})(({ theme, data }: any) => ({
  alignSelf: `stretch`,
  margin: `30px 0px 0px 0px`,
  color: theme.palette['Text']['Secondary'],
  fontStyle: theme.typography['Components']['Input Label'].fontStyle,
  fontFamily: theme.typography['Components']['Input Label'].fontFamily,
  fontWeight: theme.typography['Components']['Input Label'].fontWeight,
  fontSize: theme.typography['Components']['Input Label'].fontSize,
  letterSpacing: theme.typography['Components']['Input Label'].letterSpacing,
  lineHeight: theme.typography['Components']['Input Label'].lineHeight,
  textDecoration: theme.typography['Components']['Input Label'].textDecoration,
  textTransform: theme.typography['Components']['Input Label'].textTransform,
}));

const Btm: any = styled('div')({
  display: `flex`,
  position: `relative`,
  isolation: `isolate`,
  flexDirection: `column`,
  justifyContent: `flex-start`,
  alignItems: `center`,
  padding: `0px`,
  boxSizing: `border-box`,
  alignSelf: `stretch`,
  margin: `40px 0px 0px 0px`,
});

const ButtonContained: any = styled(Button, {
  shouldForwardProp: (prop: any) => !['data'].includes(prop.toString()),
})(({ theme, data }: any) => ({
  alignSelf: `stretch`,
  margin: `0px`,
  color: theme.palette['Primary']['Contrast'],
  fontStyle: theme.typography['Components']['Button Large'].fontStyle,
  fontFamily: theme.typography['Components']['Button Large'].fontFamily,
  fontWeight: theme.typography['Components']['Button Large'].fontWeight,
  fontSize: theme.typography['Components']['Button Large'].fontSize,
  letterSpacing: theme.typography['Components']['Button Large'].letterSpacing,
  lineHeight: theme.typography['Components']['Button Large'].lineHeight,
  textDecoration: theme.typography['Components']['Button Large'].textDecoration,
  textTransform: theme.typography['Components']['Button Large'].textTransform,
}));

const Link1: any = styled(MUILink)(({ theme }: any) => ({
  color: theme.palette['Primary']['Main'],
  fontStyle: theme.typography['Typography']['Body 1'].fontStyle,
  fontFamily: theme.typography['Typography']['Body 1'].fontFamily,
  fontWeight: theme.typography['Typography']['Body 1'].fontWeight,
  fontSize: theme.typography['Typography']['Body 1'].fontSize,
  letterSpacing: theme.typography['Typography']['Body 1'].letterSpacing,
  lineHeight: theme.typography['Typography']['Body 1'].lineHeight,
  textTransform: theme.typography['Typography']['Body 1'].textTransform,
  margin: `24px 0px 0px 0px`,
}));

function Authentication1(props: Authentication1Props): JSX.Element {
  const { data } = useAuthentication1();

  return (
    <ScreenDesktop className={props.className} data={data}>
      <LogIn>
        <Top>
          <Logo src={LogoImage} loading="lazy" alt={'Logo'} />
          <LogInToYourAccount data={data}>
            {`Log In to your Account`}
          </LogInToYourAccount>
        </Top>
        <Input1>
          <TextFieldStandard
            variant="standard"
            disabled={false}
            size={'medium'}
            label={'User Name'}
            data={data}
          />
          <TextFieldStandard1
            variant="standard"
            disabled={false}
            size={'medium'}
            label={'Password'}
            data={data}
          />
        </Input1>
        <Btm>
          <ButtonContained
            variant="contained"
            disabled={false}
            size={'large'}
            color={'primary'}
            data={data}
          >
            {'LOG IN'}
          </ButtonContained>
          <Link1 href="#" underline="always">
            Forgot Password
          </Link1>
        </Btm>
      </LogIn>
    </ScreenDesktop>
  );
}

export default Authentication1;
